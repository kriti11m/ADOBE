# ConnectPDF - Adobe Hackathon Solution

## Overview

ConnectPDF is an intelligent document analysis platform that extracts structured outlines from PDFs and provides persona-driven insights. Built for Adobe's "Connecting the Dots Through Docs" hackathon, this solution addresses both Round 2 (PDF Outline Extraction) and Round 1B (Persona-Driven Document Intelligence) requirements.

## üéØ Challenge Solutions

### Round 2: PDF Outline Extraction
- **Input**: PDF files (up to 50 pages)
- **Output**: Structured JSON with title and hierarchical headings (H1, H2, H3) with page numbers
- **Format**: 
```json
{
  "title": "Document Title",
  "outline": [
    { "level": "H1", "text": "Introduction", "page": 1 },
    { "level": "H2", "text": "Background", "page": 2 },
    { "level": "H3", "text": "Historical Context", "page": 2 }
  ]
}
```

### Round 1B: Persona-Driven Document Intelligence
- **Input**: Multiple PDFs + Persona + Job-to-be-done
- **Output**: Ranked relevant sections with refined text analysis
- **Features**: Cross-document connections, importance ranking, persona-specific insights

## üèóÔ∏è Architecture

### Frontend (React + Tailwind CSS)
- **PDF Viewer**: Interactive document display with outline sidebar
- **Smart Connections**: AI-powered cross-document analysis
- **Persona Analysis**: Role-specific content filtering and ranking
- **Audio Integration**: Text-to-speech for accessibility
- **Dark Mode**: Enhanced user experience

### Backend (Python + Docker)
- **PDF Processing**: PyPDF2, pdfplumber for text extraction
- **Heading Detection**: Font analysis, positioning, and hierarchy inference
- **AI Analysis**: Semantic similarity and relevance scoring
- **Docker Container**: AMD64 compatible, offline execution

## üöÄ Key Features

### 1. Intelligent Outline Extraction
- Automatic detection of H1, H2, H3 headings
- Page number mapping
- Font size and positioning analysis
- Hierarchical structure validation

### 2. Persona-Driven Analysis
- Role-based content filtering (Researcher, Analyst, Student, etc.)
- Task-specific relevance scoring
- Cross-document connection discovery
- Refined text extraction for key insights

### 3. Smart Document Connections
- Semantic similarity analysis
- Cross-reference identification
- Contradiction detection
- Inspiration and gap analysis

### 4. Enhanced User Experience
- Interactive document outline sidebar
- Real-time processing status
- Audio narration capabilities
- Responsive design with dark mode

## üõ†Ô∏è Technologies Used

### Frontend
- **React 18**: Modern UI framework
- **Tailwind CSS**: Utility-first styling
- **Lucide React**: Icon library
- **Context API**: State management
- **Adobe Embed API**: Professional PDF viewing and annotation

### Backend
- **Python 3.9+**: Core processing language
- **PyPDF2/pdfplumber**: PDF text extraction
- **NLTK/spaCy**: Natural language processing
- **scikit-learn**: Machine learning for similarity scoring

### Infrastructure
- **Docker**: Containerization
- **AMD64 Architecture**: Platform compatibility
- **Offline Processing**: No internet dependencies (except Adobe API)

## üì¶ Installation & Setup

### Prerequisites
- Docker (with AMD64 support)
- Node.js 16+ (for frontend development)

### Backend Setup
```bash
# Build Docker image
docker build --platform linux/amd64 -t connectpdf:latest .

# Run container
docker run --rm -v $(pwd)/input:/app/input -v $(pwd)/output:/app/output --network none connectpdf:latest
```

### Frontend Setup
```bash
cd adobe_frontend
npm install
npm start
```

### Adobe Embed API Setup
1. **Get Adobe Client ID**:
   - Visit: https://www.adobe.com/go/dcsdks_credentials
   - Sign in with your Adobe account
   - Create a new project or select existing one
   - Add "PDF Embed API" service
   - Copy the Client ID

2. **Configure the API**:
   - Open `src/config/adobe.js`
   - Replace `"YOUR_ADOBE_CLIENT_ID"` with your actual Client ID
   - Save the file

3. **Toggle Between Viewers**:
   - Use the "Adobe PDF" / "Custom PDF" toggle in the navigation bar
   - Adobe Viewer: Professional PDF viewing with annotations
   - Custom Viewer: Mock content with outline extraction demo

## üéÆ Usage

### 1. Document Upload
- Drag and drop PDF files into the application
- Automatic outline extraction begins
- Real-time processing status updates

### 2. Persona Configuration
- Select your role (Researcher, Analyst, Student, etc.)
- Define your specific task or objective
- Choose from suggested tasks based on your role

### 3. Analysis & Insights
- View extracted document outlines with page numbers
- Explore cross-document connections
- Access persona-specific relevant sections
- Listen to audio narration of content

### 4. Smart Navigation
- Click on outline items to jump to specific sections
- Use the connections panel to discover related content
- Filter insights by relevance and importance

## üìä Performance Metrics

### Round 2 Compliance
- ‚úÖ **Execution Time**: < 10 seconds for 50-page PDFs
- ‚úÖ **Model Size**: < 200MB
- ‚úÖ **Architecture**: AMD64 compatible
- ‚úÖ **Offline Operation**: No network calls required

### Round 1B Compliance
- ‚úÖ **Processing Time**: < 60 seconds for 3-5 documents
- ‚úÖ **Model Size**: < 1GB
- ‚úÖ **CPU-Only**: No GPU dependencies
- ‚úÖ **Offline Processing**: Self-contained analysis

## üéØ Scoring Criteria Alignment

### Heading Detection Accuracy (25 points)
- Precision and recall optimization
- Multi-level heading hierarchy support
- Robust font and positioning analysis

### Performance Compliance (10 points)
- Sub-second processing for small documents
- Efficient memory usage
- Optimized Docker container size

### Multilingual Support (10 points)
- Unicode text handling
- Multi-language font detection
- International character support

## üîß Development

### Project Structure
```
ADOBE/
‚îú‚îÄ‚îÄ adobe_frontend/          # React frontend
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/      # UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js          # Main application
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js        # Entry point
‚îÇ   ‚îú‚îÄ‚îÄ package.json        # Dependencies
‚îÇ   ‚îî‚îÄ‚îÄ tailwind.config.js  # Styling config
‚îú‚îÄ‚îÄ backend/                # Python backend (Docker)
‚îú‚îÄ‚îÄ Dockerfile             # Container configuration
‚îî‚îÄ‚îÄ README.md             # This file
```

### Key Components
- **PDFViewer**: Document display with outline sidebar
- **SmartConnections**: AI-powered analysis panel
- **OnboardingModal**: Persona configuration
- **DocumentSidebar**: File management interface

## üöÄ Future Enhancements

1. **Advanced NLP**: BERT-based semantic analysis
2. **Collaborative Features**: Multi-user document sharing
3. **Export Options**: Multiple format support (PDF, Word, HTML)
4. **API Integration**: RESTful endpoints for external access
5. **Mobile Support**: Responsive mobile application

## üìù License

This project is developed for Adobe's "Connecting the Dots Through Docs" hackathon. All rights reserved.

---

**Built with ‚ù§Ô∏è for Adobe Hackathon 2024**
